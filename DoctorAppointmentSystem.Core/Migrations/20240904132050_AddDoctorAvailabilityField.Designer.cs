// <auto-generated />
using System;
using DoctorAppointmentSystem.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DoctorAppointmentSystem.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240904132050_AddDoctorAvailabilityField")]
    partial class AddDoctorAvailabilityField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.AccountDetails", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountID");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InventoryID")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PracticeID")
                        .HasColumnType("integer");

                    b.HasKey("AdminID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Consumable", b =>
                {
                    b.Property<int>("ConsumableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConsumableID"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<int>("ThresholdQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ConsumableID");

                    b.HasIndex("InventoryID");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoctorID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DoctorID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.DoctorPractice", b =>
                {
                    b.Property<int>("PracticeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PracticeID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AdminID")
                        .HasColumnType("integer");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PracticeID");

                    b.HasIndex("AdminID")
                        .IsUnique();

                    b.ToTable("DoctorPractices");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.DoctorPracticeAssignment", b =>
                {
                    b.Property<int>("DoctorPracticeAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoctorPracticeAssignmentID"));

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<int>("PracticeID")
                        .HasColumnType("integer");

                    b.HasKey("DoctorPracticeAssignmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PracticeID");

                    b.ToTable("DoctorPracticeAssignments");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryID"));

                    b.Property<int>("AdminID")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InventoryID");

                    b.HasIndex("AdminID")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PatientID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.TimeSlot", b =>
                {
                    b.Property<int>("TimeSlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TimeSlotID"));

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("TimeSlotID");

                    b.HasIndex("DoctorID");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.TreatmentRecord", b =>
                {
                    b.Property<int>("TreatmentRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TreatmentRecordID"));

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TreatmentDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TreatmentRecordID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("TreatmentRecords");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Admin", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.AccountDetails", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("DoctorAppointmentSystem.Core.Entities.Admin", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Appointment", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Consumable", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Inventory", "Inventory")
                        .WithMany("Consumables")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Doctor", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.AccountDetails", "Account")
                        .WithOne("Doctor")
                        .HasForeignKey("DoctorAppointmentSystem.Core.Entities.Doctor", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.DoctorPractice", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Admin", "Admin")
                        .WithOne("Practice")
                        .HasForeignKey("DoctorAppointmentSystem.Core.Entities.DoctorPractice", "AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.DoctorPracticeAssignment", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Doctor", "Doctor")
                        .WithMany("PracticeAssignments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentSystem.Core.Entities.DoctorPractice", "Practice")
                        .WithMany("DoctorPracticeAssignments")
                        .HasForeignKey("PracticeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Practice");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Inventory", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Admin", "Admin")
                        .WithOne("Inventory")
                        .HasForeignKey("DoctorAppointmentSystem.Core.Entities.Inventory", "AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Patient", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.AccountDetails", "Account")
                        .WithOne("Patient")
                        .HasForeignKey("DoctorAppointmentSystem.Core.Entities.Patient", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.TimeSlot", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Doctor", "Doctor")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.TreatmentRecord", b =>
                {
                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Doctor", "Doctor")
                        .WithMany("TreatmentRecords")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentSystem.Core.Entities.Patient", "Patient")
                        .WithMany("TreatmentRecords")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.AccountDetails", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Admin", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Practice")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PracticeAssignments");

                    b.Navigation("TimeSlots");

                    b.Navigation("TreatmentRecords");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.DoctorPractice", b =>
                {
                    b.Navigation("DoctorPracticeAssignments");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Inventory", b =>
                {
                    b.Navigation("Consumables");
                });

            modelBuilder.Entity("DoctorAppointmentSystem.Core.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("TreatmentRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
